{"editingNodeId":null,"editingPage":false,"selectedConnection":null,"connecting":null,"pageHTML":"<body>\n<div id=\"r\">R</div>\n<div id=\"g\">G</div>\n<div id=\"b\">B</div>\n</body>","pageCSS":"body {\n\twidth: 100%;\n\theight: 100%;\n\tmargin: 0;\n\tpadding: 0;\n\tfont-size: 100pt;\n\tfont-family: Arial, Helvetica, sans-serif;\n\tcolor: white;\n\tbackground: black;\n}\n\ndiv {\n    transform-origin: top left;\n}\n\n#r {\n    color: red;\n    \n}\n\n#g {\n    color: green;\n}\n\n#b {\n    color: blue;\n}","nodeUIMap":{"n0":{"pos":[453,102]},"n1":{"pos":[-1,32],"control":{"preview":true}},"n2":{"pos":[272,-34],"control":{"live-capture":true,"preview":true,"capture":true}},"n3":{"pos":[456,56]},"n4":{"pos":[757,125]},"n5":{"pos":[440,31]},"n6":{"pos":[802,116]},"n7":{"pos":[518,11]},"n8":{"pos":[804,183]},"n9":{"pos":[808,245]},"n10":{"pos":[535,64]},"n11":{"pos":[830,191]},"n12":{"pos":[373,438],"control":{"time":true,"active":true}},"n13":{"pos":[886,200]}},"fullscreen":false,"zoomLevel":1,"nodeMap":{"nodeMap":{"n1":{"n2":1},"n2":{"n10":2},"n10":{"n13":3}},"portMap":{"n1.el-id":{"n2.el-id":true},"n2.el-id":{"n10.el-id":true},"n2.captured":{"n10.capture":true},"n10.r":{"n13.in":true},"n10.g":{"n13.g":true},"n10.b":{"n13.b":true}},"inputsMap":{"n2.el-id":{"n1.el-id":true},"n10.el-id":{"n2.el-id":true},"n10.capture":{"n2.captured":true},"n13.in":{"n10.r":true},"n13.g":{"n10.g":true},"n13.b":{"n10.b":true}},"nextId":14,"nodeOrder":["n10","n13","n12","n1","n2"],"values":{"n1":{"device-id":"8d59030a06edd68e3ae5cef9f30fcb32758b0a4ee35249470be080b675ca2393","preview":true},"n2":{"selector":"","el-id":"n1.video","width":640,"height":480,"live-capture":true,"preview":true,"capture":true},"n10":{"selector":"","el-id":"n2.canvas","sample-size":50,"capture":true},"n12":{"time":500,"active":true},"n13":{"in":0,"g":0,"b":0}},"byId":{"n1":{"id":"n1","rev":0,"text":"class VideoDevice extends N {\n  static get type() {\n    return N.HARDWARE;\n  }\n\n  static get inputs() {\n    return [{\n      name: \"device-id\",\n      observe: true,\n      defaultValue: \"default\",\n      restrict: String,\n      visible: false\n    }, {\n      name: \"preview\",\n      observe: true,\n      defaultValue: true,\n      restrict: Boolean\n    }];\n  }\n\n  static get outputs() {\n    return [\"el-id\"];\n  }\n\n  getVideoDevices() {\n    // Need to get permission for user media so we can get more useful info in enumerateDevices\n    navigator.getUserMedia({\n      video: true\n    }, this.onGetUserMediaSuccess.bind(this), this.onGetUserMediaError.bind(this));\n  }\n\n  onGetUserMediaError() {\n    console.error(arguments);\n    alert(\"Unable to access video devices!\");\n  }\n\n  onGetUserMediaSuccess() {\n    this.createDeviceList();\n  }\n\n  createDeviceList() {\n    let select = this.root.getElementById(\"select\");\n    let option = document.createElement(\"option\");\n    option.innerText = \"Select device...\";\n    option.value = \"\";\n    select.appendChild(option);\n    console.log(\"ACC CDL\", this.getAttribute(\"device-id\"));\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n      devices.forEach(device => {\n        if (device.kind === \"videoinput\") {\n          this.devices[device.deviceId] = device;\n          let option = document.createElement(\"option\");\n          option.innerText = device.label;\n          option.value = device.deviceId;\n          select.appendChild(option);\n        }\n      });\n      select.addEventListener(\"change\", event => {\n        this.setAttribute(\"device-id\", event.target.value);\n      });\n      let deviceId = this.getAttribute(\"device-id\");\n      console.log(\"ACC gotem\", deviceId, select.value);\n      if (deviceId) select.value = deviceId;\n\n      if (deviceId === \"default\" && Object.keys(this.devices).length > 0) {\n        this.setAttribute(\"device-id\", Object.keys(this.devices)[0]);\n      }\n    });\n  }\n\n  onGetDeviceSuccess(stream) {\n    console.log(\"GROT\", stream);\n    this.stream = stream;\n    this.root.getElementById(\"video\").srcObject = stream;\n    this.root.getElementById(\"video\").play();\n    this.root.getElementById(\"select\").value = this.getAttribute(\"device-id\");\n    this.send(\"el-id\", this.elId);\n  }\n\n  onGetDeviceError() {\n    console.error(arguments);\n    console.error(\"Unable to get video stream!\");\n  }\n\n  selectDevice(id) {\n    if (!id) return;\n    var constraints = {\n      deviceId: {\n        exact: id\n      }\n    };\n    console.log(\"select\", constraints);\n    navigator.getUserMedia({\n      video: constraints\n    }, this.onGetDeviceSuccess.bind(this), this.onGetDeviceError.bind(this));\n  }\n\n  onReady() {\n    this.stream = null;\n    this.devices = {};\n    this.elId = this.registerEl(\"video\", this.root.getElementById(\"video\"));\n    this.getVideoDevices();\n  }\n\n  onOutputConnected(name) {\n    if (name === \"el-id\") {\n      this.send(\"el-id\", this.elId);\n    }\n  }\n\n  onOutputWillDisconnect(name, toAddr) {\n    if (name === \"el-id\") {\n      this.sendTo(\"el-id\", toAddr, null);\n    }\n  }\n\n  onAttrChanged(name, oldValue, newValue) {\n    console.log(\"ACC\", name, oldValue, newValue);\n\n    switch (name) {\n      case \"device-id\":\n        this.selectDevice(newValue);\n        break;\n\n      case \"preview\":\n        if (this.getAttribute(\"preview\")) {\n          this.root.getElementById(\"video\").style.display = \"block\";\n        } else {\n          this.root.getElementById(\"video\").style.display = \"none\";\n        }\n\n        this.selectDevice(this.getAttribute(\"device-id\"));\n        break;\n    }\n  }\n\n}","templateHTML":"<div id=\"container\">\n\t<select id=\"select\"></select>\n\t<video id=\"video\"></video>\n</div>","templateCSS":"#container {\n\twidth: 13em;\n}\n\n#select {\n\twidth: 100%;\n\tmargin-bottom: 1em;\n}\n\nvideo {\n\twidth: 100%;\n\tbackground: black;\n}","transforms":{}},"n2":{"id":"n2","rev":0,"text":"class Canvas extends N {\n  static get type() {\n    return N.SCREEN;\n  }\n\n  static get inputs() {\n    return [{\n      name: \"selector\",\n      observe: true,\n      defaultValue: \"\",\n      restrict: String\n    }, {\n      name: \"el-id\",\n      observe: true,\n      defaultValue: null\n    }, {\n      name: \"width\",\n      observe: true,\n      defaultValue: 640,\n      restrict: Number,\n      control: N.range({\n        min: 1,\n        max: 2000\n      })\n    }, {\n      name: \"height\",\n      observe: true,\n      defaultValue: 480,\n      restrict: Number,\n      control: N.range({\n        min: 1,\n        max: 2000\n      })\n    }, {\n      name: \"capture\",\n      observe: true,\n      control: N.button()\n    }, {\n      name: \"live-capture\",\n      observe: true,\n      defaultValue: false,\n      restrict: Boolean\n    }, {\n      name: \"preview\",\n      observe: true,\n      defaultValue: true,\n      restrict: Boolean\n    }];\n  }\n\n  static get outputs() {\n    return [\"el-id\", \"data-url\", \"captured\"];\n  }\n\n  onSelectorUpdated() {\n    let sel = this.getAttribute(\"selector\");\n\n    try {\n      let el = this.screen.querySelector(sel);\n\n      if (el) {\n        el.appendChild(this.canvasEl);\n      } else {\n        this.root.getElementById(\"container\").appendChild(this.canvasEl);\n      }\n    } catch (e) {\n      this.root.getElementById(\"container\").appendChild(this.canvasEl);\n    }\n  }\n\n  onOutputConnected(name) {\n    switch (name) {\n      case \"el-id\":\n        this.send(\"el-id\", this.elId);\n        break;\n    }\n  } // onInputDisconnected(name) {\n  // \tswitch(name) {\n  // \t\tcase 'el': {\n  // \t\t\tthis.setAttribute('el', null);\n  // \t\t}\n  // \t}\n  // }\n\n\n  onReady() {\n    this.dead = false;\n    this.canvasEl = this.root.getElementById(\"canvas\");\n    this.ctx = this.canvasEl.getContext(\"2d\");\n    this.elId = this.registerEl(\"canvas\", this.canvasEl);\n    this.boundOnFrame = this.onFrame.bind(this); //this.send('el', this.canvasEl);\n  }\n\n  onFrame() {\n    if (this.dead) return;\n    if (!this.extEl || !this.extEl.tagName || !this.canvasEl) return;\n    this.ctx.drawImage(this.extEl, 0, 0, this.canvasEl.width, this.canvasEl.height);\n    this.send(\"captured\", true);\n    this.send(\"data-url\", this.canvasEl.toDataURL());\n    if (this.getAttribute(\"live-capture\")) window.requestAnimationFrame(this.boundOnFrame);\n  }\n\n  onScreenUpdated() {\n    this.onSelectorUpdated();\n  }\n\n  onDestroy() {\n    this.dead = true;\n    this.root.getElementById(\"container\").appendChild(this.canvasEl);\n  }\n\n  onOutputWillDisconnect(name, toAddr) {\n    if (name === \"el-id\") {\n      this.sendTo(\"el-id\", toAddr, null);\n    }\n  }\n\n  onAttrChanged(name, oldValue, newValue) {\n    switch (name) {\n      case \"el-id\":\n        let el = this.getEl(newValue);\n\n        if (el && el.tagName) {\n          this.extEl = el;\n        } else {\n          this.extEl = null;\n        }\n\n        this.onFrame();\n        break;\n\n      case \"selector\":\n        this.onSelectorUpdated();\n        break;\n\n      case \"width\":\n        this.canvasEl.width = this.getAttribute(\"width\");\n        break;\n\n      case \"height\":\n        this.canvasEl.height = this.getAttribute(\"height\");\n        break;\n\n      case \"capture\":\n        this.onFrame();\n        break;\n\n      case \"live-capture\":\n        let liveCapture = this.getAttribute(\"live-capture\");\n        if (liveCapture) this.onFrame();\n        break;\n\n      case \"preview\":\n        if (this.getAttribute(\"preview\")) {\n          this.root.getElementById(\"container\").style.display = \"block\";\n        } else {\n          this.root.getElementById(\"container\").style.display = \"none\";\n        }\n\n        break;\n    }\n  }\n\n}","templateHTML":"<div id=\"container\">\n\t<canvas id=\"canvas\" width=\"640\" height=\"480\"></select>\n</div>","templateCSS":"#container {\n\twidth: 13em;\n}\n\ncanvas {\n\twidth: 100%;\n\tmax-height: 13em;\n\tbackground: black;\n}","transforms":{}},"n10":{"id":"n10","rev":0,"text":"class CanvasColorStats extends N {\n  static get inputs() {\n    return [{\n      name: \"selector\",\n      observe: true,\n      defaultValue: \"\",\n      restrict: String\n    }, {\n      name: \"el-id\",\n      observe: true,\n      defaultValue: null\n    }, {\n      name: \"sample-size\",\n      observe: false,\n      defaultValue: 50,\n      restrict: N.int(2),\n      control: N.range({\n        min: 2,\n        max: 400\n      })\n    }, {\n      name: \"capture\",\n      observe: true,\n      control: N.button()\n    }];\n  }\n\n  static get outputs() {\n    return [\"r\", \"g\", \"b\", \"captured\"];\n  }\n\n  onSelectorUpdated() {\n    let sel = this.getAttribute(\"selector\");\n\n    try {\n      let el = this.screen.querySelector(sel);\n\n      if (el) {\n        el.appendChild(this.canvasEl);\n      } else {\n        this.root.getElementById(\"container\").appendChild(this.canvasEl);\n      }\n    } catch (e) {\n      this.root.getElementById(\"container\").appendChild(this.canvasEl);\n    }\n  }\n\n  onOutputConnected(name) {\n    switch (name) {\n      case \"el-id\":\n        this.send(\"el-id\", this.elId);\n        break;\n    }\n  }\n\n  onOutputWillDisconnect(name, toAddr) {\n    if (name === \"el-id\") {\n      this.sendTo(\"el-id\", toAddr, null);\n    }\n  }\n\n  onReady() {\n    this.extCanvasEl = null;\n    this.extCanvasCtx = null;\n    this.canvasEl = this.root.getElementById(\"canvas\");\n    this.elId = this.registerEl(\"canvas\", this.canvasEl);\n    this.canvasCtx = this.canvasEl.getContext(\"2d\");\n    this.boundOnFrame = this.onFrame.bind(this);\n  }\n\n  onDestroy() {\n    if (this.canvasEl) {\n      this.root.getElementById(\"container\").appendChild(this.canvasEl);\n    }\n  }\n\n  onFrame() {\n    if (!this.extCanvasEl || !this.canvasEl) return;\n    let w = this.extCanvasEl.width;\n    let h = this.extCanvasEl.height;\n    this.canvasEl.width = w;\n    this.canvasEl.height = h;\n    this.canvasCtx.clearRect(0, 0, w, h);\n    let blockSize = this.getAttribute(\"sample-size\");\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let total = 0;\n    let fw = Math.ceil(w / blockSize) * blockSize;\n    let fh = Math.ceil(h / blockSize) * blockSize;\n\n    for (let x = -(fw - w) / 2; x < fw; x += blockSize) {\n      for (let y = -(fh - h) / 2; y < fh; y += blockSize) {\n        let pixel = this.extCanvasCtx.getImageData(x + blockSize / 2, y + blockSize / 2, 1, 1);\n        let d = pixel.data;\n        r += d[0];\n        g += d[1];\n        b += d[2];\n        total += 255;\n      }\n    } // this.canvasCtx.drawImage(extEl, 0, 0, canvas.width, canvas.height);\n\n\n    this.send(\"captured\", true);\n    this.send(\"r\", r / total);\n    this.send(\"g\", g / total);\n    this.send(\"b\", b / total);\n  }\n\n  onScreenUpdated() {\n    this.onSelectorUpdated();\n  }\n\n  onAttrChanged(name, oldValue, newValue) {\n    // debugger;\n    switch (name) {\n      case \"el-id\":\n        let el = this.getEl(newValue);\n\n        if (el && el.tagName && el.tagName.toLowerCase() === \"canvas\") {\n          this.extCanvasEl = el;\n          this.extCanvasCtx = this.extCanvasEl.getContext(\"2d\");\n        }\n\n        break;\n\n      case \"selector\":\n        this.onSelectorUpdated();\n        break;\n\n      case \"capture\":\n        break;\n    }\n\n    this.onFrame();\n  }\n\n}","templateHTML":"<div id=\"container\">\n\t<canvas id=\"canvas\" width=\"640\" height=\"480\"></select>\n</div>","templateCSS":"#container {\n\twidth: 13em;\n}\n\ncanvas {\n\twidth: 100%;\n\tmax-height: 13em;\n\tbackground: black;\n}","transforms":{}},"n12":{"id":"n12","rev":0,"text":"class Pulse extends N {\n  static get inputs() {\n    return [{\n      name: \"time\",\n      observe: true,\n      defaultValue: 1000,\n      restrict: N.int(1)\n    }, {\n      name: \"start\",\n      observe: true,\n      control: N.button()\n    }, {\n      name: \"stop\",\n      observe: true,\n      control: N.button()\n    }, {\n      name: \"active\",\n      observe: true,\n      defaultValue: true,\n      restrict: Boolean\n    }, {\n      name: \"reset\",\n      observe: true,\n      control: N.button()\n    }];\n  }\n\n  static get outputs() {\n    return [\"pulse\"];\n  }\n\n  onReady() {\n    this.boundOnTick = this.onTick.bind(this);\n    this.start();\n  }\n\n  onDestroy() {\n    this.stop();\n  }\n\n  start() {\n    this.stop();\n    this.setIsActive(true);\n    this.intervalId = setInterval(this.boundOnTick, this.getAttribute(\"time\"));\n  }\n\n  stop() {\n    this.setIsActive(false);\n    clearInterval(this.intervalId);\n  }\n\n  onTick() {\n    this.send(\"pulse\", true);\n  }\n\n  setIsActive(newIsActive) {\n    this.active = newIsActive;\n    this.setAttribute(\"active\", this.active);\n  }\n\n  onAttrChanged(name, oldValue, newValue) {\n    switch (name) {\n      case \"time\":\n        this.start();\n        break;\n\n      case \"reset\":\n        this.start();\n        break;\n\n      case \"start\":\n        this.start();\n        break;\n\n      case \"stop\":\n        this.stop();\n        break;\n\n      case \"active\":\n        let nextActive = this.getAttribute(\"active\");\n        if (this.active === nextActive) return;\n\n        if (nextActive) {\n          this.start();\n        } else {\n          this.stop();\n        }\n\n        break;\n    }\n  }\n\n}","templateHTML":null,"templateCSS":null,"transforms":{}},"n13":{"id":"n13","rev":7,"text":"class Node extends N {\n  static get inputs() {\n    return [{\n      name: \"in\", restrict:Number, observe: true\n    },{\n      name: \"g\", restrict:Number, observe: true\n    },{\n      name: \"b\", restrict:Number, observe: true\n    }];\n  }\n\n  static get outputs() {\n    return [\"out\"];\n  }\n\n  onAttrChanged(name, oldValue, newValue) {\n      console.log(\"???scale(\" + (1 + parseFloat(newValue)) + \")\")\n    switch (name) {\n      case \"in\":\n        this.screen.getElementById('r').style.transform = \"scale(\" + (parseFloat(newValue) * 3) + \")\"\n        break;\n        \n        case \"g\":\n        this.screen.getElementById('g').style.transform = \"scale(\" + (parseFloat(newValue) * 3) + \")\"\n        break;\n        \n        case \"b\":\n        this.screen.getElementById('b').style.transform = \"scale(\" + (parseFloat(newValue) * 3) + \")\"\n        break;\n    }\n  }\n\n  onReady() {}\n\n  onDestroy() {}\n\n  onScreenDestroy() {}\n\n  onScreenUpdated() {}\n\n  onInputConnected(name, toAddress) {}\n\n  onOutputConnected(name, fromAddress) {}\n\n  onInputWillDisconnect(name, fromAddress) {}\n\n  onOutputWillDisconnect(name, toAddress) {}\n\n  onInputDisconnected(name, numConnections, numNodeConnections) {}\n\n  onOutputDisconnected(name, numConnections, numNodeConnections) {}\n\n}","templateHTML":null,"templateCSS":null,"transforms":{}}},"chainPool":{"nodeIdToChainId":{},"nextChainId":0,"pool":{}}}}