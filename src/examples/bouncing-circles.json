{
	"editingNodeId": null,
	"editingPage": false,
	"selectedConnection": null,
	"connecting": null,
	"pageHTML":
		"<body>\n    <div id=\"circle-1\" class=\"circle\"></div>\n    <div id=\"circle-2\" class=\"circle\"></div>\n    <div id=\"circle-3\" class=\"circle\"></div>\n    <div id=\"circle-4\" class=\"circle\"></div>\n</body>",
	"pageCSS":
		"body {\n\tbackground: black;\n\tpadding: 0;\n\tmargin: 0;\n\tcolor: white;\n\ttransition: transform 1s;\n}\n\n.circle {\n\tposition: fixed;\n\tleft: 0;\n\ttop: 0;\n\twidth: 400px;\n\theight: 400px;\n\tborder-radius: 400px;\n\tbackground: red;\n\ttransition: transform .2s;\n\topacity:.9;\n\tbackground-blend-mode: multiply;\n\ttransform-origin: center center;\n}\n\n#circle-1 {\n\tbackground: white;\n}\n\n#circle-2 {\n\tbackground: magenta;\n}\n\n#circle-3 {\n\tbackground: cyan;\n}\n\n#circle-4 {\n\tbackground: yellow;\n}",
	"nodeUIMap": {
		"n0": { "pos": [841, -7] },
		"n1": { "pos": [59, 47], "control": { "value": true } },
		"n2": { "pos": [397, 177], "control": { "selector": true } },
		"n3": { "pos": [404, 252], "control": { "selector": true } },
		"n4": { "pos": [315, 628], "control": { "selector": true } },
		"n5": { "pos": [58, 38] },
		"n6": { "pos": [309, 14] },
		"n7": { "pos": [317, 127] },
		"n8": { "pos": [316, 236] },
		"n9": { "pos": [651, 349] },
		"n10": { "pos": [654, 471] },
		"n11": { "pos": [655, 595] },
		"n12": { "pos": [937, 231] },
		"n13": { "pos": [138, 387] },
		"n14": { "pos": [137, 506] },
		"n15": { "pos": [138, 621] },
		"n16": { "pos": [922, 358] },
		"n17": { "pos": [1027, 64] },
		"n18": { "pos": [1027, 176] },
		"n19": { "pos": [1025, 288] },
		"n20": { "pos": [885, 111] },
		"n21": { "pos": [-86, 221] },
		"n22": { "pos": [542, 221] },
		"n23": { "pos": [461, 629] },
		"n24": { "pos": [431, 11] },
		"n25": { "pos": [464, 72] },
		"n26": { "pos": [508, 147] },
		"n27": { "pos": [306, 319], "control": { "note-on": true } },
		"n28": { "pos": [364, 268] },
		"n29": { "pos": [1145, 173] },
		"n30": { "pos": [98, 166] },
		"n31": { "pos": [276, 402], "control": { "note-on": true } },
		"n32": { "pos": [604, 395] }
	},
	"fullscreen": false,
	"nodeMap": {
		"nodeMap": {
			"n5": { "n22": 1, "n24": 1, "n25": 1, "n26": 1 },
			"n24": { "n0": 3 },
			"n26": { "n12": 3 },
			"n22": { "n16": 3 },
			"n25": { "n20": 3 }
		},
		"portMap": {
			"n5.trigger": { "n22.in": true, "n24.in": true, "n25.in": true, "n26.in": true },
			"n24.out": { "n0.x": true, "n0.y": true, "n0.scale": true },
			"n26.out": { "n12.x": true, "n12.y": true, "n12.scale": true },
			"n22.out": { "n16.x": true, "n16.y": true, "n16.scale": true },
			"n25.out": { "n20.x": true, "n20.y": true, "n20.scale": true }
		},
		"inputsMap": {
			"n22.in": { "n5.trigger": true },
			"n24.in": { "n5.trigger": true },
			"n25.in": { "n5.trigger": true },
			"n26.in": { "n5.trigger": true },
			"n0.x": { "n24.out": true },
			"n0.y": { "n24.out": true },
			"n0.scale": { "n24.out": true },
			"n12.x": { "n26.out": true },
			"n12.y": { "n26.out": true },
			"n12.scale": { "n26.out": true },
			"n16.x": { "n22.out": true },
			"n16.y": { "n22.out": true },
			"n16.scale": { "n22.out": true },
			"n20.x": { "n25.out": true },
			"n20.y": { "n25.out": true },
			"n20.scale": { "n25.out": true }
		},
		"nextId": 33,
		"nodeOrder": ["n5", "n24", "n25", "n26", "n22", "n0", "n20", "n12", "n16", "n31", "n30", "n32"],
		"values": {
			"n22": { "in": 1 },
			"n24": { "in": 1 },
			"n25": { "in": 1 },
			"n26": { "in": 1 },
			"n0": {
				"selector": "#circle-1",
				"x": 38.478246315231665,
				"y": 76.79480938397018,
				"scale": 2.016884263522459
			},
			"n20": {
				"selector": "#circle-4",
				"x": 38.772376433534795,
				"y": 53.66186744092094,
				"scale": 1.9260419077873394
			},
			"n12": {
				"selector": "#circle-2",
				"x": 58.23446029137065,
				"y": 87.85732903004471,
				"scale": 2.7720022669393414
			},
			"n16": {
				"selector": "#circle-3",
				"x": 95.56878683698875,
				"y": 62.63897595276724,
				"scale": 2.0626223131169743
			},
			"n30": {
				"text":
					"Click the button above to cause the circles to animate to a random position. If you have MIDI hardware connect the \"note-on\" output of the \"MIDI Device\" node to one of the \"Passthru\" nodes."
			},
			"n31": {
				"device-id": "",
				"channel": 0,
				"message": false,
				"realtime": false,
				"beat": "quarter note",
				"note-on": true,
				"note-off": false,
				"cc": false,
				"zero-as-off": true
			},
			"n32": {
				"text":
					"The circles and animations are done with plain HTML and CSS. Click on \"Edit Screen\" in the menu at the top right to edit these. For example, you could change the \".circle\"&nbsp;transition time from \".2s\" to \"1s\"."
			}
		},
		"byId": {
			"n5": {
				"id": "n5",
				"rev": 0,
				"text":
					"class Button extends N {\n\tstatic get type() {\n\t\treturn N.HARDWARE;\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"trigger\"];\n\t}\n\n\tonClick() {\n\t\tthis.send(\"trigger\", true);\n\t}\n\n\tonReady() {\n\t\tthis.boundOnClick = this.onClick.bind(this);\n\t\tthis.root.getElementById(\"button\").addEventListener(\"click\", this.boundOnClick);\n\t}\n\n\tonDestroy() {\n\t\tthis.root.getElementById(\"button\").removeEventListener(\"click\", this.boundOnClick);\n\t}\n\n}",
				"templateHTML": "<button id=\"button\">Click</button>",
				"templateCSS":
					"button {\n\tfont-size: 13pt;\n\twidth: 100%;\n\tborder-radius: 4px;\n\tborder: none;\n\tcursor: pointer;\n\topacity: 0.8;\n}\n\nbutton:hover {\n\topacity: 1;\n}",
				"transforms": {}
			},
			"n22": {
				"id": "n22",
				"rev": 2,
				"text":
					"class Passthru extends N {\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"in\",\n\t\t\tobserve: true,\n\t\t\trestrict: Number\n\t\t}];\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"out\"];\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"in\":\n\t\t\t\tthis.send(\"out\", newValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {}
			},
			"n24": {
				"id": "n24",
				"rev": 0,
				"text":
					"class Passthru extends N {\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"in\",\n\t\t\tobserve: true,\n\t\t\trestrict: Number\n\t\t}];\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"out\"];\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"in\":\n\t\t\t\tthis.send(\"out\", newValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {}
			},
			"n25": {
				"id": "n25",
				"rev": 0,
				"text":
					"class Passthru extends N {\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"in\",\n\t\t\tobserve: true,\n\t\t\trestrict: Number\n\t\t}];\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"out\"];\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"in\":\n\t\t\t\tthis.send(\"out\", newValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {}
			},
			"n26": {
				"id": "n26",
				"rev": 0,
				"text":
					"class Passthru extends N {\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"in\",\n\t\t\tobserve: true,\n\t\t\trestrict: Number\n\t\t}];\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"out\"];\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"in\":\n\t\t\t\tthis.send(\"out\", newValue);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {}
			},
			"n0": {
				"id": "n0",
				"rev": 18,
				"text":
					"class Circle extends N {\n\tstatic get type() {\n\t\treturn N.SCREEN\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\t\tname: 'selector',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: '',\n\t\t\t\trestrict: String,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'x',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'y',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'scale',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 1,\n\t\t\t\trestrict: N.float(0.01)\n\t\t\t}\n\t\t]\n\t}\n\n\tgetEl() {\n\t\ttry {\n\t\t\tlet el = this.screen.querySelector(this.getAttribute('selector'))\n\t\t\tif (el) return el;\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// oldValue and newValue are always strings as these are\n\t// attributes on the component. Use this.getAttribute\n\t// to get the typed value\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tlet el = this.getEl();\n\t\tif (!el) return;\n\n\t\tlet x = this.getAttribute('x');\n\t\tlet y = this.getAttribute('y');\n\t\tlet scale = this.getAttribute('scale');\n\n\t\tel.style.transform = `translate(${x}vw, ${y}vh) scale(${scale})`\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {
					"x": "100 * Math.random()",
					"y": "80 * Math.random()",
					"scale": "3 * Math.random()"
				}
			},
			"n20": {
				"id": "n20",
				"rev": 2,
				"text":
					"class Circle extends N {\n\tstatic get type() {\n\t\treturn N.SCREEN\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\t\tname: 'selector',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: '',\n\t\t\t\trestrict: String,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'x',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'y',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'scale',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 1,\n\t\t\t\trestrict: N.float(0.01)\n\t\t\t}\n\t\t]\n\t}\n\n\tgetEl() {\n\t\ttry {\n\t\t\tlet el = this.screen.querySelector(this.getAttribute('selector'))\n\t\t\tif (el) return el;\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// oldValue and newValue are always strings as these are\n\t// attributes on the component. Use this.getAttribute\n\t// to get the typed value\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tlet el = this.getEl();\n\t\tif (!el) return;\n\n\t\tlet x = this.getAttribute('x');\n\t\tlet y = this.getAttribute('y');\n\t\tlet scale = this.getAttribute('scale');\n\n\t\tel.style.transform = `translate(${x}vw, ${y}vh) scale(${scale})`\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {
					"x": "100 * Math.random()",
					"y": "100 * Math.random()",
					"scale": "3 * Math.random()"
				}
			},
			"n12": {
				"id": "n12",
				"rev": 2,
				"text":
					"class Circle extends N {\n\tstatic get type() {\n\t\treturn N.SCREEN\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\t\tname: 'selector',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: '',\n\t\t\t\trestrict: String,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'x',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'y',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'scale',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 1,\n\t\t\t\trestrict: N.float(0.01)\n\t\t\t}\n\t\t]\n\t}\n\n\tgetEl() {\n\t\ttry {\n\t\t\tlet el = this.screen.querySelector(this.getAttribute('selector'))\n\t\t\tif (el) return el;\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// oldValue and newValue are always strings as these are\n\t// attributes on the component. Use this.getAttribute\n\t// to get the typed value\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tlet el = this.getEl();\n\t\tif (!el) return;\n\n\t\tlet x = this.getAttribute('x');\n\t\tlet y = this.getAttribute('y');\n\t\tlet scale = this.getAttribute('scale');\n\n\t\tel.style.transform = `translate(${x}vw, ${y}vh) scale(${scale})`\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {
					"x": "100 * Math.random()",
					"y": "100 * Math.random()",
					"scale": "3 * Math.random()"
				}
			},
			"n16": {
				"id": "n16",
				"rev": 2,
				"text":
					"class Circle extends N {\n\tstatic get type() {\n\t\treturn N.SCREEN\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\t\tname: 'selector',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: '',\n\t\t\t\trestrict: String,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'x',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'y',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'scale',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 1,\n\t\t\t\trestrict: N.float(0.01)\n\t\t\t}\n\t\t]\n\t}\n\n\tgetEl() {\n\t\ttry {\n\t\t\tlet el = this.screen.querySelector(this.getAttribute('selector'))\n\t\t\tif (el) return el;\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// oldValue and newValue are always strings as these are\n\t// attributes on the component. Use this.getAttribute\n\t// to get the typed value\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tlet el = this.getEl();\n\t\tif (!el) return;\n\n\t\tlet x = this.getAttribute('x');\n\t\tlet y = this.getAttribute('y');\n\t\tlet scale = this.getAttribute('scale');\n\n\t\tel.style.transform = `translate(${x}vw, ${y}vh) scale(${scale})`\n\t}\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {
					"x": "100 * Math.random()",
					"y": "100 * Math.random()",
					"scale": "3 * Math.random()"
				}
			},
			"n30": {
				"id": "n30",
				"rev": 0,
				"text":
					"class Note extends N {\n\tstatic get type() {\n\t\treturn N.INFO;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"text\",\n\t\t\tobserve: false,\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}];\n\t}\n\n\tonReady() {\n\t\tthis.boundOnInput = this.onInput.bind(this);\n\t\tthis.root.getElementById(\"container\").addEventListener(\"input\", this.boundOnInput);\n\t\tlet text = this.getAttribute(\"text\");\n\t\tif (text) this.root.getElementById(\"container\").innerHTML = text;\n\t}\n\n\tonInput(event) {\n\t\tthis.setAttribute(\"text\", event.target.innerHTML);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"text\":\n\t\t\t\tthis.root.getElementById(\"container\").innerHTML = newValue;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": "<div id=\"container\" contenteditable>Click here to edit...</div>",
				"templateCSS": "#container { width: 13em; }",
				"transforms": {}
			},
			"n31": {
				"id": "n31",
				"rev": 0,
				"text":
					"class MIDIDevice extends N {\n\tstatic get type() {\n\t\treturn N.HARDWARE;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"device-id\",\n\t\t\tobserve: true,\n\t\t\tdefaultValue: \"\",\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}, {\n\t\t\tname: \"channel\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: 0,\n\t\t\trestrict: N.int(0, 16),\n\t\t\tcontrol: N.range()\n\t\t}, {\n\t\t\tname: \"message\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: false,\n\t\t\trestrict: Boolean\n\t\t}, {\n\t\t\tname: \"realtime\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: false,\n\t\t\trestrict: Boolean\n\t\t}, {\n\t\t\tname: \"beat\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: \"quarter note\",\n\t\t\trestrict: N.set([\"24ppqn\", \"quarter note\", \"bar\", \"4 bars\"])\n\t\t}, {\n\t\t\tname: \"note-on\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: false,\n\t\t\trestrict: Boolean\n\t\t}, {\n\t\t\tname: \"note-off\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: false,\n\t\t\trestrict: Boolean\n\t\t}, {\n\t\t\tname: \"cc\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: false,\n\t\t\trestrict: Boolean\n\t\t}, {\n\t\t\tname: \"zero-as-off\",\n\t\t\tobserve: false,\n\t\t\tdefaultValue: true,\n\t\t\trestrict: Boolean\n\t\t}];\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"message\", \"start\", \"stop\", \"continue\", \"clock\", \"note-on\", \"note-off\", \"cc\", \"bpm\"];\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tsetInput(id) {\n\t\tif (!this.inputs) return;\n\t\tthis.removeMIDIListeners();\n\n\t\tif (id !== \"\") {\n\t\t\tlet input = this.inputs.get(id);\n\n\t\t\tif (input) {\n\t\t\t\tinput.addEventListener(\"midimessage\", this.boundOnMIDIMessage);\n\t\t\t}\n\t\t}\n\n\t\tthis.root.getElementById(\"select\").value = id;\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tthis.setInput(newValue);\n\t}\n\n\tremoveMIDIListeners() {\n\t\tif (!this.inputs) return;\n\n\t\tfor (let input of this.inputs.values()) {\n\t\t\tinput.removeEventListener(\"midimessage\", this.boundOnMIDIMessage);\n\t\t}\n\t}\n\n\tonMIDIMessage(event) {\n\t\tlet data = Array.from(event.data);\n\t\tlet channel = this.getAttribute(\"channel\");\n\t\tlet allowMessage = this.getAttribute(\"message\");\n\t\tlet allowRealTime = this.getAttribute(\"realtime\");\n\t\tlet allowNoteOn = this.getAttribute(\"note-on\");\n\t\tlet allowNoteOff = this.getAttribute(\"note-off\");\n\t\tlet allowCC = this.getAttribute(\"cc\");\n\t\tlet transformNoteOnVelocityZeroAsNoteOff = this.getAttribute(\"zero-as-off\");\n\t\tlet sendClockPerBeat = this.getAttribute(\"beat\");\n\t\tif (allowMessage) this.send(\"message\", data); // Clock:\n\n\t\tif (data[0] === 0xfa && allowRealTime) {\n\t\t\t//start\n\t\t\tthis.sendClock = true;\n\t\t\tthis.clock = 0;\n\t\t\treturn this.send(\"start\", data);\n\t\t}\n\n\t\tif (data[0] === 0xfc && allowRealTime) {\n\t\t\t//stop\n\t\t\tthis.sendClock = false;\n\t\t\tthis.clock = 0;\n\t\t\treturn this.send(\"stop\", data);\n\t\t}\n\n\t\tif (data[0] === 0xfb && allowRealTime) {\n\t\t\t//continue\n\t\t\treturn this.send(\"continue\", data);\n\t\t}\n\n\t\tif (data[0] === 0xf8 && allowRealTime && this.sendClock) {\n\t\t\tif (this.clock % 24 === 0) {\n\t\t\t\tlet now = Date.now();\n\t\t\t\tif (this.lastClock) this.send(\"bpm\", 60000 / (now - this.lastClock));\n\t\t\t\tthis.lastClock = now;\n\t\t\t}\n\n\t\t\tlet shouldSendBeat = false;\n\n\t\t\tswitch (sendClockPerBeat) {\n\t\t\t\tcase \"24ppqn\":\n\t\t\t\t\tshouldSendBeat = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"quarter note\":\n\t\t\t\t\tshouldSendBeat = this.clock % 24 === 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"bar\":\n\t\t\t\t\tshouldSendBeat = this.clock % 96 === 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"4 bars\":\n\t\t\t\t\tshouldSendBeat = this.clock === 0;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (shouldSendBeat) this.send(\"clock\", data);\n\t\t\tthis.clock = (this.clock + 1) % 384; //24ppqn * 4 quarter notes * 4 bars\n\t\t} // Channel messages:\n\n\n\t\tif (channel === 0 || channel === (data[0] & 0x0f) + 1) {\n\t\t\tlet type = data[0] >> 4;\n\n\t\t\tif (type === 0x9 && data[2] === 0 && transformNoteOnVelocityZeroAsNoteOff) {\n\t\t\t\ttype = 0x8;\n\t\t\t}\n\n\t\t\tif (type === 0x9 && allowNoteOn) return this.send(\"note-on\", data);\n\t\t\tif (type === 0x8 && allowNoteOff) return this.send(\"note-off\", data);\n\t\t\tif (type === 0xb && allowCC) return this.send(\"cc\", data);\n\t\t}\n\t}\n\n\tonMIDISuccess(midiAccess) {\n\t\tthis.inputs = midiAccess.inputs;\n\t\tlet select = this.root.getElementById(\"select\");\n\t\tlet option = document.createElement(\"option\");\n\t\toption.innerText = \"Select device...\";\n\t\toption.value = \"\";\n\t\tselect.appendChild(option);\n\n\t\tfor (let input of this.inputs.values()) {\n\t\t\toption = document.createElement(\"option\");\n\t\t\toption.innerText = input.manufacturer + \" \" + input.name;\n\t\t\toption.value = input.id;\n\t\t\tselect.appendChild(option);\n\t\t}\n\n\t\tselect.addEventListener(\"change\", event => {\n\t\t\tthis.setAttribute(\"device-id\", event.target.value);\n\t\t}); // Force listener to listen:\n\n\t\tthis.setInput(this.getAttribute(\"device-id\"));\n\t}\n\n\tonMIDIFailure() {\n\t\talert(\"Unable to obtain MIDI access!\");\n\t}\n\n\tonReady() {\n\t\tthis.boundOnMIDIMessage = this.onMIDIMessage.bind(this);\n\t\tnavigator.requestMIDIAccess().then(this.onMIDISuccess.bind(this), this.onMIDIFailure.bind(this));\n\t}\n\n\tonDestroy() {\n\t\tthis.removeMIDIListeners();\n\t}\n\n}",
				"templateHTML": "<div>\n\t<select id=\"select\"></select>\n</div>",
				"templateCSS": null,
				"transforms": {}
			},
			"n32": {
				"id": "n32",
				"rev": 0,
				"text":
					"class Note extends N {\n\tstatic get type() {\n\t\treturn N.INFO;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"text\",\n\t\t\tobserve: false,\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}];\n\t}\n\n\tonReady() {\n\t\tthis.boundOnInput = this.onInput.bind(this);\n\t\tthis.root.getElementById(\"container\").addEventListener(\"input\", this.boundOnInput);\n\t\tlet text = this.getAttribute(\"text\");\n\t\tif (text) this.root.getElementById(\"container\").innerHTML = text;\n\t}\n\n\tonInput(event) {\n\t\tthis.setAttribute(\"text\", event.target.innerHTML);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"text\":\n\t\t\t\tthis.root.getElementById(\"container\").innerHTML = newValue;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": "<div id=\"container\" contenteditable>Click here to edit...</div>",
				"templateCSS": "#container { width: 13em; }",
				"transforms": {}
			}
		},
		"chainPool": { "nodeIdToChainId": {}, "nextChainId": 0, "pool": {} }
	}
}
