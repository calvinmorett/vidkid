{
	"editingNodeId": null,
	"editingPage": false,
	"selectedConnection": null,
	"connecting": null,
	"pageHTML":
		"<body>\n    <div id=\"container\">\n        <span id=\"text\">Hello, World!</span>\n    </div>\n</body>",
	"pageCSS":
		"body {\n\twidth: 100%;\n\theight: 100%;\n\tmargin: 0;\n\tpadding: 0;\n\tfont-size: 14pt;\n\tfont-family: Arial, Helvetica, sans-serif;\n\tcolor: white;\n\tbackground: black;\n}\n\n#container {\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    background: blue;\n}\n\n#text {\n    font-weight: bold;\n    font-size: 100pt;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 100%;\n    text-align: center;\n}",
	"nodeUIMap": {
		"n0": { "pos": [549, 477] },
		"n1": { "pos": [235, 375], "control": { "amount": true } },
		"n2": { "pos": [32, 29] },
		"n3": { "pos": [31, 168] },
		"n4": { "pos": [286, 30] },
		"n5": { "pos": [535, 31] },
		"n6": { "pos": [599, 175] },
		"n7": { "pos": [651, 342] }
	},
	"isCablesMuted": false,
	"fullscreen": false,
	"zoomLevel": 1,
	"nodeMap": {
		"nodeMap": { "n1": { "n0": 1 } },
		"portMap": { "n1.chain-id": { "n0.chain-id": true } },
		"inputsMap": { "n0.chain-id": { "n1.chain-id": true } },
		"nextId": 8,
		"nodeOrder": ["n2", "n5", "n6", "n1", "n4", "n0", "n7"],
		"values": {
			"n0": { "chain-id": "c1", "selector": "body" },
			"n1": { "chain-id": "", "type": "hue-rotate", "amount": 0 },
			"n2": {
				"text":
					"This first example will show you the basics of how to use VidKid.<br><br>1. Right click on an empty space in the background to create a new node. Find \"Mouse\" and select it.<br>"
			},
			"n4": {
				"text":
					"2. Click on the \"x\" output of your new Mouse node and then click the \"amount\" input on the CSSFilter node below. This will connect the horizontal position of the mouse to the amount of the CSS filter."
			},
			"n5": {
				"text": "3. Now move the mouse and the background of the visualization should change!"
			},
			"n6": {
				"text":
					"4. Finally, click 'Edit Screen' in the top menu and replace the \"Hello, World\" text with your own personal message."
			},
			"n7": { "text": "5. That's it! Happy hacking..." }
		},
		"byId": {
			"n0": {
				"id": "n0",
				"rev": 0,
				"text":
					"class CSSFilterElement extends N {\n\tstatic get type() {\n\t\treturn N.SCREEN;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"chain-id\",\n\t\t\tobserve: true,\n\t\t\tdefaultValue: \"\",\n\t\t\trestrict: String\n\t\t}, {\n\t\t\tname: \"selector\",\n\t\t\tobserve: true,\n\t\t\tdefaultValue: \"body\",\n\t\t\trestrict: String\n\t\t}];\n\t}\n\n\tgetEl(selector) {\n\t\ttry {\n\t\t\treturn this.screen.querySelector(selector);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tsetFilter(selector, filterText) {\n\t\tlet el = this.getEl(selector);\n\t\tif (el) el.style.filter = filterText;\n\t}\n\n\tonInputDisconnected(name) {\n\t\tif (name === \"chain-id\") {\n\t\t\tthis.setAttribute(\"chain-id\", \"\");\n\t\t}\n\t}\n\n\tgetCSSFilterString(chainId) {\n\t\tlet chain = this.getChain(chainId);\n\t\tif (!chain) return \"\";\n\t\treturn chain.get().join(\" \");\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"selector\":\n\t\t\t\tthis.setFilter(oldValue, \"\");\n\t\t\t\tthis.setFilter(newValue, this.getCSSFilterString(this.getAttribute(\"chain-id\")));\n\t\t\t\tbreak;\n\n\t\t\tcase \"chain-id\":\n\t\t\t\tthis.setFilter(this.getAttribute(\"selector\"), this.getCSSFilterString(newValue));\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {}
			},
			"n1": {
				"id": "n1",
				"rev": 0,
				"text":
					"class CSSFilter extends N {\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"chain-id\",\n\t\t\tobserve: true,\n\t\t\tdefaultValue: \"\",\n\t\t\trestrict: String\n\t\t}, {\n\t\t\tname: \"type\",\n\t\t\tobserve: true,\n\t\t\tdefaultValue: \"grayscale\",\n\t\t\trestrict: N.set([\"blur\", \"brightness\", \"contrast\", \"grayscale\", \"hue-rotate\", \"invert\", \"opacity\", \"saturate\", \"sepia\"])\n\t\t}, {\n\t\t\tname: \"amount\",\n\t\t\tobserve: true,\n\t\t\tdefaultValue: 0,\n\t\t\trestrict: Number\n\t\t}];\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"chain-id\"];\n\t}\n\n\tgetCSSRule(type, amount) {\n\t\tswitch (type) {\n\t\t\tcase \"blur\":\n\t\t\t\treturn \"blur(\" + amount + \"px)\";\n\n\t\t\tcase \"brightness\":\n\t\t\t\treturn \"brightness(\" + amount + \"%)\";\n\n\t\t\tcase \"contrast\":\n\t\t\t\treturn \"contrast(\" + amount + \"%)\";\n\n\t\t\tcase \"grayscale\":\n\t\t\t\treturn \"grayscale(\" + amount + \"%)\";\n\n\t\t\tcase \"hue-rotate\":\n\t\t\t\treturn \"hue-rotate(\" + amount + \"deg)\";\n\n\t\t\tcase \"invert\":\n\t\t\t\treturn \"invert(\" + amount + \"%)\";\n\n\t\t\tcase \"opacity\":\n\t\t\t\treturn \"opacity(\" + amount + \"%)\";\n\n\t\t\tcase \"saturate\":\n\t\t\t\treturn \"saturate(\" + amount + \"%)\";\n\n\t\t\tcase \"sepia\":\n\t\t\t\treturn \"sepia(\" + amount + \"%)\";\n\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n\tonInputDisconnected(name) {\n\t\tif (name === \"chain-id\") {\n\t\t\tthis.releaseChain(this.getAttribute(\"chain-id\"));\n\t\t\tthis.setAttribute(\"chain-id\", \"\");\n\t\t}\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tlet rule = this.getCSSRule(this.getAttribute(\"type\"), this.getAttribute(\"amount\"));\n\t\tif (!rule) return;\n\t\tlet chain = this.getChain(this.getAttribute(\"chain-id\"));\n\t\tchain.set(this.id, rule);\n\t\tthis.send(\"chain-id\", chain.id);\n\t}\n\n\tonDestroy() {\n\t\tthis.releaseChain(this.getAttribute(\"chain-id\"));\n\t}\n\n}",
				"templateHTML": null,
				"templateCSS": null,
				"transforms": {}
			},
			"n2": {
				"id": "n2",
				"rev": 0,
				"text":
					"class Note extends N {\n\tstatic get type() {\n\t\treturn N.INFO;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"text\",\n\t\t\tobserve: false,\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}];\n\t}\n\n\tonReady() {\n\t\tthis.boundOnInput = this.onInput.bind(this);\n\t\tthis.root.getElementById(\"container\").addEventListener(\"input\", this.boundOnInput);\n\t\tlet text = this.getAttribute(\"text\");\n\t\tif (text) this.root.getElementById(\"container\").innerHTML = text;\n\t}\n\n\tonInput(event) {\n\t\tthis.setAttribute(\"text\", event.target.innerHTML);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"text\":\n\t\t\t\tthis.root.getElementById(\"container\").innerHTML = newValue;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": "<div id=\"container\" contenteditable>Click here to edit...</div>",
				"templateCSS": "#container { width: 13em; }",
				"transforms": {}
			},
			"n4": {
				"id": "n4",
				"rev": 0,
				"text":
					"class Note extends N {\n\tstatic get type() {\n\t\treturn N.INFO;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"text\",\n\t\t\tobserve: false,\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}];\n\t}\n\n\tonReady() {\n\t\tthis.boundOnInput = this.onInput.bind(this);\n\t\tthis.root.getElementById(\"container\").addEventListener(\"input\", this.boundOnInput);\n\t\tlet text = this.getAttribute(\"text\");\n\t\tif (text) this.root.getElementById(\"container\").innerHTML = text;\n\t}\n\n\tonInput(event) {\n\t\tthis.setAttribute(\"text\", event.target.innerHTML);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"text\":\n\t\t\t\tthis.root.getElementById(\"container\").innerHTML = newValue;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": "<div id=\"container\" contenteditable>Click here to edit...</div>",
				"templateCSS": "#container { width: 13em; }",
				"transforms": {}
			},
			"n5": {
				"id": "n5",
				"rev": 0,
				"text":
					"class Note extends N {\n\tstatic get type() {\n\t\treturn N.INFO;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"text\",\n\t\t\tobserve: false,\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}];\n\t}\n\n\tonReady() {\n\t\tthis.boundOnInput = this.onInput.bind(this);\n\t\tthis.root.getElementById(\"container\").addEventListener(\"input\", this.boundOnInput);\n\t\tlet text = this.getAttribute(\"text\");\n\t\tif (text) this.root.getElementById(\"container\").innerHTML = text;\n\t}\n\n\tonInput(event) {\n\t\tthis.setAttribute(\"text\", event.target.innerHTML);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"text\":\n\t\t\t\tthis.root.getElementById(\"container\").innerHTML = newValue;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": "<div id=\"container\" contenteditable>Click here to edit...</div>",
				"templateCSS": "#container { width: 13em; }",
				"transforms": {}
			},
			"n6": {
				"id": "n6",
				"rev": 0,
				"text":
					"class Note extends N {\n\tstatic get type() {\n\t\treturn N.INFO;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"text\",\n\t\t\tobserve: false,\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}];\n\t}\n\n\tonReady() {\n\t\tthis.boundOnInput = this.onInput.bind(this);\n\t\tthis.root.getElementById(\"container\").addEventListener(\"input\", this.boundOnInput);\n\t\tlet text = this.getAttribute(\"text\");\n\t\tif (text) this.root.getElementById(\"container\").innerHTML = text;\n\t}\n\n\tonInput(event) {\n\t\tthis.setAttribute(\"text\", event.target.innerHTML);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"text\":\n\t\t\t\tthis.root.getElementById(\"container\").innerHTML = newValue;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": "<div id=\"container\" contenteditable>Click here to edit...</div>",
				"templateCSS": "#container { width: 13em; }",
				"transforms": {}
			},
			"n7": {
				"id": "n7",
				"rev": 0,
				"text":
					"class Note extends N {\n\tstatic get type() {\n\t\treturn N.INFO;\n\t}\n\n\tstatic get inputs() {\n\t\treturn [{\n\t\t\tname: \"text\",\n\t\t\tobserve: false,\n\t\t\trestrict: String,\n\t\t\tvisible: false\n\t\t}];\n\t}\n\n\tonReady() {\n\t\tthis.boundOnInput = this.onInput.bind(this);\n\t\tthis.root.getElementById(\"container\").addEventListener(\"input\", this.boundOnInput);\n\t\tlet text = this.getAttribute(\"text\");\n\t\tif (text) this.root.getElementById(\"container\").innerHTML = text;\n\t}\n\n\tonInput(event) {\n\t\tthis.setAttribute(\"text\", event.target.innerHTML);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"text\":\n\t\t\t\tthis.root.getElementById(\"container\").innerHTML = newValue;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n}",
				"templateHTML": "<div id=\"container\" contenteditable>Click here to edit...</div>",
				"templateCSS": "#container { width: 13em; }",
				"transforms": {}
			}
		},
		"chainPool": {
			"nodeIdToChainId": { "n1": "c1" },
			"nextChainId": 2,
			"pool": { "c1": { "id": "c1", "values": [{ "id": "n1", "v": "hue-rotate(0deg)" }] } }
		}
	}
}
