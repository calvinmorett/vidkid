{"nodeMap":{"nodeMap":{"n6":{"n7":1},"n7":{"n8":1},"n9":{"n6":1,"n2":1}},"portMap":{"n6.my-output":{"n7.amount":true},"n7.filter-string":{"n8.filter-string":true},"n9.clock":{"n6.my-input":true,"n2.step":true}},"inputsMap":{"n7.amount":{"n6.my-output":true},"n8.filter-string":{"n7.filter-string":true},"n6.my-input":{"n9.clock":true},"n2.step":{"n9.clock":true}},"values":{"n2":{"step":"248","tween-time":200},"n6":{"my-input":"248"},"n7":{"filter-string":"","type":"hue-rotate","amount":100},"n8":{"filter-string":"n7:hue-rotate(100deg)","selector":"body"},"n9":{"device-id":"-486371328","channel":0,"message":false,"realtime":true,"beat":"quarter note","note-on":false,"note-off":false,"cc":false,"zero-as-off":true}},"nextId":10,"nodeOrder":["n7","n8","n6","n2","n9"],"byId":{"n2":{"id":"n2","rev":0,"text":"class ThreeJSTwoCubes extends N {\n\tstatic get inputs() {\n\t\treturn [\n\t\t\t{\n\t\t\t\tname: \"step\",\n\t\t\t\tobserve: true,\n\t\t\t\tcontrol: N.button()\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"tween-time\",\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 1000,\n\t\t\t\trestrict: Number\n\t\t\t}\n\t\t];\n\t}\n\n\tgetRand() {\n\t\treturn Math.random() * this.randFactor - this.randFactor / 2\n\t}\n\n\tgetTweenTime() {\n\t\treturn parseFloat(this.getAttribute('tween-time'));\n\t}\n\n\tmoveCube() {\n\t\tthis.cubePos = {\n\t\t\tx: this.cube.position.x,\n\t\t\ty: this.cube.position.y,\n\t\t\tz: this.cube.position.z\n\t\t}\n\t\tthis.cubeRot = {\n\t\t\tx: this.cube.rotation.x,\n\t\t\ty: this.cube.rotation.y,\n\t\t\tz: this.cube.rotation.z\n\t\t}\n\t\tthis.tween1 = new TWEEN.Tween(this.cubePos)\n\t\t\t.to(\n\t\t\t\t{\n\t\t\t\t\tx: this.getRand(),\n\t\t\t\t\ty: this.getRand(),\n\t\t\t\t\tz: this.getRand()\n\t\t\t\t},\n\t\t\t\tthis.getTweenTime()\n\t\t\t)\n\t\t\t.easing(TWEEN.Easing.Quadratic.InOut)\n\t\t\t.onUpdate(this.boundOnTweenUpdate)\n\t\tthis.tween2 = new TWEEN.Tween(this.cubeRot)\n\t\t\t.to(\n\t\t\t\t{\n\t\t\t\t\tx: this.getRand(),\n\t\t\t\t\ty: this.getRand(),\n\t\t\t\t\tz: this.getRand()\n\t\t\t\t},\n\t\t\t\tthis.getTweenTime()\n\t\t\t)\n\t\t\t.easing(TWEEN.Easing.Quadratic.InOut)\n\t\t\t.onUpdate(this.boundOnTweenUpdate)\n\n\t\tthis.camPos = {\n\t\t\tx: this.camera.position.x,\n\t\t\ty: this.camera.position.y,\n\t\t\tz: this.camera.position.z\n\t\t}\n\t\tthis.camRot = {\n\t\t\tx: this.camera.rotation.x,\n\t\t\ty: this.camera.rotation.y,\n\t\t\tz: this.camera.rotation.z\n\t\t}\n\t\tthis.tween3 = new TWEEN.Tween(this.camPos)\n\t\t\t.to(\n\t\t\t\t{\n\t\t\t\t\tx: this.getRand(),\n\t\t\t\t\ty: this.getRand(),\n\t\t\t\t\tz: this.getRand()\n\t\t\t\t},\n\t\t\t\tthis.getTweenTime()\n\t\t\t)\n\t\t\t.easing(TWEEN.Easing.Quadratic.InOut)\n\t\t\t.onUpdate(this.boundOnTweenUpdate)\n\t\tthis.tween4 = new TWEEN.Tween(this.camRot)\n\t\t\t.to(\n\t\t\t\t{\n\t\t\t\t\tx: this.getRand(),\n\t\t\t\t\ty: this.getRand(),\n\t\t\t\t\tz: this.getRand()\n\t\t\t\t},\n\t\t\t\tthis.getTweenTime()\n\t\t\t)\n\t\t\t.easing(TWEEN.Easing.Quadratic.InOut)\n\t\t\t.onUpdate(this.boundOnTweenUpdate)\n\n\t\tthis.tween1.start()\n\t\tthis.tween2.start()\n\t\tthis.tween3.start()\n\t\tthis.tween4.start()\n\t}\n\n\tonTweenUpdate() {\n\t\tthis.cube.position.x = this.cubePos.x\n\t\tthis.cube.position.y = this.cubePos.y\n\t\tthis.cube.position.z = this.cubePos.z\n\n\t\tthis.cube.rotation.x = this.cubeRot.x\n\t\tthis.cube.rotation.y = this.cubeRot.y\n\t\tthis.cube.rotation.z = this.cubeRot.z\n\n\t\tthis.camera.position.x = this.camPos.x\n\t\tthis.camera.position.y = this.camPos.y\n\t\tthis.camera.position.z = this.camPos.z\n\n\t\tthis.camera.rotation.x = this.camRot.x\n\t\tthis.camera.rotation.y = this.camRot.y\n\t\tthis.camera.rotation.z = this.camRot.z\n\t}\n\n\tanimate() {\n\t\tif (!this.active) return;\n\t\trequestAnimationFrame(this.boundAnimate);\n\n\t\tTWEEN.update()\n\t\tthis.camera.lookAt(this.cube.position)\n\t\tthis.renderer.render(this.scene, this.camera)\n\t}\n\n\tresize() {\n\t\tthis.camera.aspect = window.innerWidth / window.innerHeight;\n\t\tthis.camera.updateProjectionMatrix();\n\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight);\n\t}\n\n\tonReady() {\n\t\tthis.active = true\n\t\tthis.boundAnimate = this.animate.bind(this)\n\t\tthis.boundMoveCube = this.moveCube.bind(this)\n\t\tthis.boundOnTweenUpdate = this.onTweenUpdate.bind(this)\n\t\tthis.randFactor = 3\n\n\t\tthis.scene = new THREE.Scene()\n\t\tthis.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n\t\tthis.renderer = new THREE.WebGLRenderer()\n\n\t\tthis.renderer.setSize(window.innerWidth, window.innerHeight)\n\n\t\tthis.screen.body.appendChild(this.renderer.domElement)\n\n\t\tlet geometry = new THREE.BoxGeometry(1, 1, 1)\n\t\tlet geometry2 = new THREE.BoxGeometry(2, 2, 2)\n\t\tlet material = new THREE.MeshBasicMaterial({ color: 0xff0000 })\n\t\tlet material2 = new THREE.MeshBasicMaterial({ color: 0x0000ff })\n\t\tmaterial.wireframe = true\n\t\tmaterial2.wireframe = true\n\t\tthis.cube = new THREE.Mesh(geometry, material)\n\t\tthis.cube2 = new THREE.Mesh(geometry2, material2)\n\t\tthis.scene.add(this.cube)\n\t\tthis.scene.add(this.cube2)\n\n\t\tthis.camera.position.z = 5\n\n\t\tthis.animate()\n\t}\n\n\tonDestroy() {\n\t\tthis.active = false;\n\t\tthis.screen.body.removeChild(this.domElement);\n\t\twindow.removeEventListener('resize', this.boundResize);\n\t}\n\n\tonScreenDestroy() {\n\t\tthis.screen.body.removeChild(this.domElement);\n\t}\n\n\tonScreenUpdated() {\n\t\tthis.screen.body.appendChild(this.domElement);\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"step\":\n\t\t\t\tthis.moveCube();\n\t\t\t\tbreak;\n\t\t}\n\t}\n}","templateHTML":null,"templateCSS":null,"transforms":{}},"n6":{"id":"n6","rev":1,"text":"class Node extends N {\n\tstatic get inputs() {\n\t  return [\n\t\t\t{\n\t\t\t\tname: 'my-input',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: null,\n\t\t\t\trestrict: null,\n\t\t\t\tcontrol: null\n\t\t\t}\n\t\t]\n\t}\n\n\tstatic get outputs() {\n\t  return ['my-output']\n\t}\n\n\tonReady() {\n\t\t// Called when component is on the DOM\n\t\tthis.bit = true;\n\t}\n\n\tonDestroy() {\n\t\t// Called when component will be removed from the DOM\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t    this.bit = !this.bit;\n\t  this.send('my-output', this.bit);\n\t}\n}","templateHTML":null,"templateCSS":null,"transforms":{}},"n7":{"id":"n7","rev":0,"text":"class CSSFilter extends N {\n\tstatic get inputs() {\n\t  return [\n\t\t\t{\n\t\t\t\tname: 'filter-string',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: '',\n\t\t\t\trestrict: String\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'type',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 'grayscale',\n\t\t\t\trestrict: N.set(['blur', 'brightness', 'contrast', 'grayscale', 'hue-rotate', 'invert', 'opacity', 'saturate', 'sepia'])\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'amount',\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: Number\n\t\t\t}\n\t\t]\n\t}\n\n\tstatic get outputs() {\n\t  return ['filter-string']\n\t}\n\n\tcssFilterStringToArray(css) {\n\t\tif (css.length === 0) return []\n\n\t\treturn css.split('|').map(pair => {\n\t\t\tlet tokens = pair.split(':')\n\t\t\treturn {\n\t\t\t\tid: tokens[0],\n\t\t\t\tstyle: tokens[1]\n\t\t\t}\n\t\t})\n\t}\n\n\tcssArrayToFilterString(array) {\n\t\treturn array.map(o => o.id + ':' + o.style).join('|')\n\t}\n\n\tgetStyleIndex(array) {\n\t\tfor (let i = 0, len = array.length; i < len; i++) {\n\t\t\tif (array[i].id === this.id) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetCSSRule(type, amount) {\n\t\tswitch(type)\n\t\t{\n\t\t\tcase 'blur': return \"blur(\" + amount + \"px)\"\n\t\t\tcase 'brightness': return \"brightness(\" + amount + \"%)\"\n\t\t\tcase 'contrast': return \"contrast(\" + amount + \"%)\"\n\t\t\tcase 'grayscale': return \"grayscale(\" + amount + \"%)\"\n\t\t\tcase 'hue-rotate': return \"hue-rotate(\" + amount + \"deg)\"\n\t\t\tcase 'invert': return \"invert(\" + amount + \"%)\"\n\t\t\tcase 'opacity': return \"opacity(\" + amount + \"%)\"\n\t\t\tcase 'saturate': return \"saturate(\" + amount + \"%)\"\n\t\t\tcase 'sepia': return \"sepia(\" + amount + \"%)\"\n\t\t\tdefault: return null\n\t\t}\n\t}\n\n\tonInputDisconnected(name) {\n\t\tif(name === 'filter-string')\n\t\t{\n\t\t\tthis.setAttribute('filter-string', '')\n\t\t}\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tlet arr = this.cssFilterStringToArray(this.getAttribute('filter-string'))\n\t\tlet index = this.getStyleIndex(arr);\n\t\tif(index === null) index = arr.length;\n\n\t\tlet rule = this.getCSSRule(this.getAttribute('type'), this.getAttribute('amount'))\n\n\t\tif(!rule) return\n\n\t\tarr[index] = {\n\t\t\tid: this.id,\n\t\t\tstyle: rule\n\t\t}\n\n\t\tlet filterString = this.cssArrayToFilterString(arr);\n\n\t\tthis.send('filter-string', filterString);\n\t}\n}","templateHTML":null,"templateCSS":null,"transforms":{"amount":"x*100"}},"n8":{"id":"n8","rev":0,"text":"class CSSFilterElement extends N {\n\tstatic get inputs() {\n\t\treturn [\n\t\t\t{\n\t\t\t\tname: \"filter-string\",\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: \"\",\n\t\t\t\trestrict: String\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"selector\",\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: \"body\",\n\t\t\t\trestrict: String\n\t\t\t}\n\t\t];\n\t}\n\n\tgetEl(selector) {\n\t\ttry {\n\t\t\treturn this.screen.querySelector(selector);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tonReady() {\n\t\t// Called when component is on the DOM\n\t}\n\n\tonDestroy() {\n\t\t// Called when component will be removed from the DOM\n\t}\n\n\tgetCSSFilterString(s) {\n\t\treturn s\n\t\t\t.split(\"|\")\n\t\t\t.map(pair => pair.split(\":\")[1])\n\t\t\t.join(\" \");\n\t}\n\n\tsetFilter(selector, filterText) {\n\t\tlet el = this.getEl(selector);\n\t\tif (el) el.style.filter = filterText;\n\t}\n\n\tonInputDisconnected(name) {\n\t\tif(name === 'filter-string')\n\t\t{\n\t\t\tthis.setFilter(this.getAttribute('selector'), '')\n\t\t}\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tswitch (name) {\n\t\t\tcase \"selector\":\n\t\t\t\tthis.setFilter(oldValue, '');\n\t\t\t\tthis.setFilter(newValue, this.getCSSFilterString(this.getAttribute(\"filter-string\")));\n\t\t\t\tbreak;\n\n\t\t\tcase \"filter-string\":\n\t\t\t\tthis.setFilter(this.getAttribute('selector'), this.getCSSFilterString(newValue));\n\t\t\t\tbreak;\n\t\t}\n\t}\n}","templateHTML":null,"templateCSS":null,"transforms":{}},"n9":{"id":"n9","rev":0,"text":"class MIDIDevice extends N {\n\tstatic get inputs() {\n\t\treturn [\n\t\t\t{\n\t\t\t\tname: \"device-id\",\n\t\t\t\tobserve: true,\n\t\t\t\tdefaultValue: \"\",\n\t\t\t\trestrict: String,\n\t\t\t\tvisible: false\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"channel\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: 0,\n\t\t\t\trestrict: N.int(0, 16),\n\t\t\t\tcontrol: N.range()\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"message\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: false,\n\t\t\t\trestrict: Boolean\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"realtime\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: false,\n\t\t\t\trestrict: Boolean\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"beat\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: \"quarter note\",\n\t\t\t\trestrict: N.set([\"24ppqn\", \"quarter note\", \"bar\", \"4 bars\"])\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"note-on\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: false,\n\t\t\t\trestrict: Boolean\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"note-off\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: false,\n\t\t\t\trestrict: Boolean\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"cc\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: false,\n\t\t\t\trestrict: Boolean\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: \"zero-as-off\",\n\t\t\t\tobserve: false,\n\t\t\t\tdefaultValue: true,\n\t\t\t\trestrict: Boolean\n\t\t\t}\n\t\t];\n\t}\n\n\tstatic get outputs() {\n\t\treturn [\"message\", \"start\", \"stop\", \"continue\", \"clock\", \"note-on\", \"note-off\", \"cc\"];\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tsetInput(id) {\n\t\tconsole.log('SET INPUT', id);\n\t\tif(!this.inputs) return;\n\n\t\tthis.removeMIDIListeners();\n\n\t\tif (id !== \"\") {\n\t\t\tlet input = this.inputs.get(id);\n\t\t\tif (input) {\n\t\t\t\tinput.addEventListener(\"midimessage\", this.boundOnMIDIMessage);\n\t\t\t}\n\t\t}\n\n\t\tthis.root.getElementById('select').value = id;\n\t}\n\n\tonAttrChanged(name, oldValue, newValue) {\n\t\tconsole.log('ACC', name, oldValue, newValue);\n\t\tthis.setInput(newValue);\n\t}\n\n\tremoveMIDIListeners() {\n\t\tif (!this.inputs) return;\n\t\tfor (let input of this.inputs.values()) {\n\t\t\tinput.removeEventListener(\"midimessage\", this.boundOnMIDIMessage);\n\t\t}\n\t}\n\n\tonMIDIMessage(event) {\n\t\tlet data = event.data;\n\t\tlet channel = this.getAttribute('channel');\n\t\tlet allowMessage = this.getAttribute('message');\n\t\tlet allowRealTime = this.getAttribute('realtime');\n\t\tlet allowNoteOn = this.getAttribute('note-on');\n\t\tlet allowNoteOff = this.getAttribute('note-off');\n\t\tlet allowCC = this.getAttribute('cc');\n\t\tlet transformNoteOnVelocityZeroAsNoteOff = this.getAttribute('zero-as-off');\n\t\tlet sendClockPerBeat = this.getAttribute('beat');\n\n\t\tif(allowMessage) this.send(\"message\", data.toString())\n\n\t\t//// console.log('got midi', data, channel, allowRealTime, allowNoteOn, allowNoteOff, allowCC)\n\n\t\t// Clock:\n\t\tif(data[0] === 0xFA && allowRealTime) { //start\n\t\t\tthis.sendClock = true;\n\t\t\tthis.clock = 0;\n\t\t\treturn this.send('start', data.toString());\n\t\t}\n\t\tif(data[0] === 0xFC && allowRealTime) { //stop\n\t\t\tthis.sendClock = false;\n\t\t\tthis.clock = 0;\n\t\t\treturn this.send('stop', data.toString());\n\t\t}\n\t\tif(data[0] === 0xFB && allowRealTime) { //continue\n\t\t\treturn this.send('continue', data.toString());\n\t\t}\n\t\tif(data[0] === 0xF8 && allowRealTime && this.sendClock) {\n\t\t\tlet shouldSendBeat = false;\n\t\t\tswitch(sendClockPerBeat) {\n\t\t\t\tcase \"24ppqn\":\n\t\t\t\t\tshouldSendBeat = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"quarter note\":\n\t\t\t\t\tshouldSendBeat = this.clock % 24 === 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"bar\":\n\t\t\t\t\tshouldSendBeat = this.clock % 96 === 0;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"4 bars\":\n\t\t\t\t\tshouldSendBeat = this.clock === 0;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(shouldSendBeat) this.send('clock', data.toString());\n\t\t\tthis.clock = (this.clock + 1) % 384; //24ppqn * 4 quarter notes * 4 bars\n\t\t}\n\n\t\t// Channel messages:\n\t\tif(channel === 0 || channel === (data[0] & 0x0F) + 1) {\n\t\t\tlet type = data[0] >> 4;\n\n\t\t\tif(type === 0x9 && data[2] === 0 && transformNoteOnVelocityZeroAsNoteOff) {\n\t\t\t\ttype = 0x8\n\t\t\t}\n\n\t\t\tif(type === 0x9 && allowNoteOn) return this.send('note-on', data.toString());\n\t\t\tif(type === 0x8 && allowNoteOff) return this.send('note-off', data.toString());\n\t\t\tif(type === 0xB && allowCC) return this.send('cc', data.toString());\n\t\t}\n\t}\n\n\tonMIDISuccess(midiAccess) {\n\t\tconsole.log('MIDI SUCCESS', midiAccess);\n\t\tthis.inputs = midiAccess.inputs;\n\t\tlet select = this.root.getElementById(\"select\");\n\n\t\tlet option = document.createElement(\"option\");\n\t\toption.innerText = \"Select device...\";\n\t\toption.value = \"\";\n\t\tselect.appendChild(option);\n\n\t\tfor (let input of this.inputs.values()) {\n\t\t\tconsole.log(input);\n\t\t\toption = document.createElement(\"option\");\n\t\t\toption.innerText = input.manufacturer + \" \" + input.name;\n\t\t\toption.value = input.id;\n\t\t\tselect.appendChild(option);\n\t\t}\n\n\t\t// let deviceId = this.getAttribute('device-id');\n\t\t// select.value = deviceId;\n\n\t\tselect.addEventListener(\"change\", event => {\n\t\t\tconsole.log(\"you did it\", event.target.value);\n\t\t\tthis.setAttribute(\"device-id\", event.target.value);\n\t\t});\n\n\t\t// Force listener to listen:\n\t\tthis.setInput(this.getAttribute('device-id'));\n\t}\n\n\tonMIDIFailure() {\n\t\talert(\"Unable to obtain MIDI access!\");\n\t}\n\n\tonReady() {\n\t\tconsole.log(\"MIDIDEVICE READY!\");\n\n\t\tthis.boundOnMIDIMessage = this.onMIDIMessage.bind(this);\n\t\tnavigator\n\t\t\t.requestMIDIAccess()\n\t\t\t.then(this.onMIDISuccess.bind(this), this.onMIDIFailure.bind(this));\n\t}\n\n\tonDestroy() {\n\t\tconsole.error(\"MIDIDEVICE DESTROY!\");\n\t\tthis.removeMIDIListeners();\n\t}\n}","templateHTML":"<div>\n\t<select id=\"select\"></select>\n</div>","templateCSS":null,"transforms":{}}}},"editingNodeId":null,"editingPage":false,"selectedConnection":null,"connecting":null,"pageHTML":"<body>\n\n</body>","pageCSS":"body {\n\twidth: 100%;\n\theight: 100%;\n\tmargin: 0;\n\tpadding: 0;\n\tfont-size: 14pt;\n\tfont-family: Arial, Helvetica, sans-serif;\n\tcolor: white;\n\tbackground: black;\n}","nodeUIMap":{"n0":{"pos":[354,275],"control":{"clock":true}},"n1":{"pos":[890,194],"control":{"tween-time":true}},"n2":{"pos":[880,224],"control":{"tween-time":true,"step":true}},"n3":{"pos":[244,15],"control":{"clock":true,"note-on":true}},"n4":{"pos":[405,286],"control":{"type":true}},"n5":{"pos":[652,439]},"n6":{"pos":[138,312]},"n7":{"pos":[528,265],"control":{"type":true}},"n8":{"pos":[640,417]},"n9":{"pos":[154,1],"control":{"realtime":true}}},"fullscreen":false}